# import pandas
# import numpy
# import scikit-learn
# import matplotlib
# import seaborn

def task2_1():
    """Задание 2.1. Логистическая регрессия, случайный лес и дерево решений для предсказания возрастной группы
пассажира. Вам предоставлен датасет Titanic. Ваша задача — написать скрипт на Python для оценки моделей машинного
обучения, которые предсказывают возрастную группу пассажира.
Инструкции:
Импортируйте необходимые библиотеки, включая pandas, numpy, scikit-learn, matplotlib и seaborn.
Загрузите датасет Titanic из CSV-файла.
Предобработайте датасет Titanic:
Удалите столбцы, не полезные для предсказания (например: 'PassengerId', 'Name', 'Ticket', 'Cabin').
Заполните пропущенные значения в датасете (например, замените пропущенные значения возраста на средний возраст).
Преобразуйте категориальные столбцы (такие как 'Sex' и 'Embarked') в числа с помощью one-hot кодирования.
Создайте новую целевую переменную 'Age_Category' с помощью pd.cut() со следующими интервалами:
0: 0-18 лет (дети и подростки)
1: 19-30 лет (молодые взрослые)
2: 31-50 лет (взрослые среднего возраста)
3: 51+ лет (пожилые)
Используйте эти интервалы для присвоения каждому пассажиру возрастной категории.
Разделите данные на обучающую и тестовую выборки с помощью train-test split.
Обучите три модели: логистическую регрессию, случайный лес и дерево решений.
Выведите точность, матрицу ошибок в виде тепловой карты и отчет классификации для каждой модели на тестовой выборке.

Задание 2.2. Веб-приложение на Gradio.
Создайте веб-приложение с помощью Gradio, которое позволяет пользователям вводить данные о пассажире (например, пол,
класс билета и т.д.) и предсказывать возрастную категорию пассажира с помощью вашей обученной модели.
Инструкции:
Используйте Gradio для создания интерактивного веб-интерфейса для вашей обученной модели.
Gradio — это библиотека Python, которая позволяет быстро создавать и делиться веб-приложениями для моделей. Подробнее о
Gradio: https://www.gradio.app/
Убедитесь, что пользователи могут легко вводить все необходимые характеристики пассажира.
Когда пользователь отправляет информацию, приложение должно четко отображать результат предсказания (например,
"Ребенок/Подросток", "Молодой взрослый", "Взрослый среднего возраста" или "Пожилой").

https://icedrive.net/s/6YBzzgF2B1fCBNx59vVR5kX41PZP
Titanic_dataset.csv - Icedrive"""
    import pandas
    import numpy
    import sklearn
    import matplotlib

    import seaborn

    # 1. Загрузка датасета "Titanic" из seaborn
    titanic_data = seaborn.load_dataset('titanic')

    # 2. Вывод первых нескольких строк датасета для проверки
    print("Первые 5 строк датасета Titanic:")
    print(titanic_data.head())

    # 3. Вывод основной информации о датасете (количество строк, столбцы, типы данных, пропуски)
    print("\nОсновная информация о датасете:")
    titanic_data.info()

    # 4. Вывод описательной статистики для числовых столбцов
    print("\nОписательная статистика:")
    print(titanic_data.describe())

    # 5. Вывод описательной статистики для категориальных столбцов
    print("\nОписательная статистика для категориальных столбцов:")
    print(titanic_data.describe(include=['object', 'category']))